// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PortalDataPresentation.DAL;
using System;

namespace PortalDataPresentation.Migrations
{
    [DbContext(typeof(PortalContext))]
    partial class PortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("PortalData.Models.ArtisticInstalation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CurentLocationId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RecordCreateTime");

                    b.HasKey("ID");

                    b.HasIndex("CurentLocationId")
                        .IsUnique();

                    b.ToTable("ArtisticInstalation");
                });

            modelBuilder.Entity("PortalData.Models.DataType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("KeyName");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RecordCreateTime");

                    b.HasKey("ID");

                    b.ToTable("DataType");
                });

            modelBuilder.Entity("PortalData.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("InstalationID");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("OutID");

                    b.Property<DateTime>("RecordCreateTime");

                    b.HasKey("ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("PortalData.Models.MeasurementData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DataTypeID");

                    b.Property<int>("InstalationID");

                    b.Property<int>("LocationID");

                    b.Property<DateTime>("MeasurmentDate");

                    b.Property<DateTime>("RecordCreateTime");

                    b.Property<double>("Value");

                    b.HasKey("ID");

                    b.HasIndex("DataTypeID");

                    b.HasIndex("InstalationID");

                    b.HasIndex("LocationID");

                    b.ToTable("MeasurementData");
                });

            modelBuilder.Entity("PortalDataPresentation.ViewModels.MeasurementDataViewModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataTypeName");

                    b.Property<DateTime>("MeasurmentDate");

                    b.Property<double>("Value");

                    b.HasKey("ID");

                    b.ToTable("MeasurementDataViewModel");
                });

            modelBuilder.Entity("PortalDataPresentation.ViewModels.PostMeasurementsVM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataTypeName");

                    b.Property<string>("InstalationName");

                    b.Property<string>("LocationName");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("PostMeasurementsVM");
                });

            modelBuilder.Entity("PortalData.Models.ArtisticInstalation", b =>
                {
                    b.HasOne("PortalData.Models.Location", "CurentLocation")
                        .WithOne("Instalation")
                        .HasForeignKey("PortalData.Models.ArtisticInstalation", "CurentLocationId");
                });

            modelBuilder.Entity("PortalData.Models.MeasurementData", b =>
                {
                    b.HasOne("PortalData.Models.DataType", "DataType")
                        .WithMany("MeasurementDatas")
                        .HasForeignKey("DataTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalData.Models.ArtisticInstalation", "Instalation")
                        .WithMany("MeasurementDatas")
                        .HasForeignKey("InstalationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalData.Models.Location", "Location")
                        .WithMany("MeasurementDatas")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
